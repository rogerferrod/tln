## Natural Language Toolkit: sem3.fcfg
##
## Alternative simple grammar with transitive verbs and 
## quantifiers for the book. 
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT


% start S
############################
# Grammar Rules
############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]
S[SEM = <?vp(?np)>] -> VP[NUM=?n,SEM=?vp] NP[NUM=?n,SEM=?np]

NP[LOC=?l,NUM=?n,SEM=<?np>] -> PropN[LOC=?l,NUM=?n,SEM=?np]
NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=<?np>] -> PRP[-LOC,NUM=?n,SEM=?np]
NP[SEM=<?pp(?np)>] -> NP[SEM=?np] PP[NUM=?n,SEM=?pp]
NP[SEM=<?poss>] -> PP[+POSS,SEM=?poss]
#####
NP[SEM=<\Q.exists x.((?nom)(x) & Q(x))>] -> Nom[NUM=?n,SEM=?nom]
NP[SEM=<?nom>] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[SEM=<\R.(exists x.((?prp)(x) & (?adj)(x) & (?nom)(x) & R(x)))>] -> PRP[+POSS, SEM=?prp] JJ[SEM=?adj] Nom[SEM=?nom]
NP[SEM=<\Q.(exists x.((?nom)(x) & (?adj)(x) & Q(x) ))>] -> Det[SEM=?det] JJ[SEM=?adj] Nom[SEM=?nom]

Nom[NUM=?n,SEM=<?nom>] -> N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=<?v>] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]
VP[NUM=?n,SEM=<?v(?obj)>] -> AUX[NUM=?n,SEM=?vrb] TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[SEM=<?ex(?v)>] -> EX[SEM=?ex] IV[SEM=?v]
VP[NUM=?n,SEM=<?v(?pp)>] -> IV[NUM=?n,SEM=?v] PP[SEM=?pp]
VP[NUM=?n,SEM=<?cp(?v)>] -> CP[SEM=?cp] VP[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<(?v(?pp)(?adv))>] -> VP[NUM=?n,SEM=?v] ADV[SEM=?adv] PP[SEM=?pp]

PP[+LOC, SEM=<?prp(?poss)>] -> PRP[+LOC, SEM=?prp] PP[SEM=?poss]
PP[+POSS, SEM=<\T.exists x.((?jj)(x) & (?nom)(x) & T(x))>] -> JJ[+POSS, SEM=?jj] Nom[SEM=?nom]
PP[SEM=<?prp(?nom)>] -> PRP[SEM=?prp] Nom[SEM=?nom]
PP[SEM=<?prp(?np)>] -> PRP[SEM=?prp] NP[SEM=?np]

#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,GEN=m,SEM=<\P.P(angus)>] -> 'angus'
PropN[-LOC,NUM=sg,GEN=f,SEM=<\P.P(cyril)>] -> 'cyril'
PropN[-LOC,NUM=sg,GEN=f,SEM=<\P.P(irene)>] -> 'irene'
PropN[-LOC,NUM=sg,GEN=m,SEM=<\P.P(alex)>] -> 'alex'

Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'the'

EX[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'there'

PRP[+PERS, NUM=sg, SEM=<\P.P(you)>] -> 'you'
PRP[+LOC, SEM=<\R P x.R(\y.(P(x) & on(x,y)))>] -> 'on'
PRP[+POSS, NUM=sg, SEM=<\x.your(x)>] -> 'your'
PRP[SEM=<\T p.exists y.(from(p, y) & T(y))>] -> 'of'
PRP[SEM=<\T p.exists y.(from(p, y) & T(y))>] -> 'from'

AUX[NUM=sg, SEM=<\P.P>] -> 'are'
AUX[NUM=sg, SEM=<\P.P>] -> 'is'

JJ[+POSS, NUM=sg, SEM=<\x.my(x)>] -> 'my'
JJ[SEM=<\x.big(x)>] -> 'big'
JJ[SEM=<\x.green(x)>] -> 'green'
JJ[SEM=<\x.little(x)>] -> 'little'

N[NUM=sg,GEN=m,SEM=<\x.man(x)>] -> 'man'
N[NUM=sg,GEN=f,SEM=<\x.girl(x)>] -> 'girl'
N[NUM=sg,GEN=m,SEM=<\x.boy(x)>] -> 'boy'
N[NUM=sg,GEN=m,SEM=<\x.bone(x)>] -> 'bone'
N[NUM=sg,GEN=m,SEM=<\x.dog(x)>] -> 'dog'
N[NUM=pl,GEN=m,SEM=<\x.dog(x)>] -> 'dogs'
N[NUM=sg,GEN=f,SEM=<\x.price(x)>] -> 'price'
N[NUM=sg,GEN=f,SEM=<\x.head(x)>] -> 'head'
N[NUM=sg,GEN=f,SEM=<\x.opportunity(x)>] -> 'opportunity'
N[NUM=pl,GEN=f,SEM=<\x.thing(x)>] -> 'things'
N[+LOC, NUM=sg,GEN=m,SEM=<\x.here(x)>] -> 'here'
N[NUM=sg,GEN=f,SEM=<\x.apple(x)>] -> 'apple'
N[NUM=sg,GEN=f,SEM=<\x.lesson(x)>] -> 'lesson'
N[NUM=sg,GEN=m,SEM=<\x.mouse(x)>] -> 'mouse'
N[NUM=sg,GEN=f,SEM=<\x.cat(x)>] -> 'cat'

IV[NUM=sg,SEM=<\x.exists e.(walk(e) & agent(e,x))>,TNS=pres] -> 'walks'
IV[NUM=pl,SEM=<\x.exists e.(walk(e) & agent(e,x))>,TNS=pres] -> 'walk'
IV[NUM=sg,SEM=<\x.exists e.(presence(e) & agent(e,x))>,TNS=pres] -> 'is'
IV[NUM=sg,SEM=<\P T x.exists e.(fly(e) & agent(e, x) & T(e) & P(e))>,TNS=ger] -> 'flying'
IV[NUM=sg,SEM=<\P T x.exists e.(escape(e) & agent(e, x) & T(e) & P(e))>,TNS=pres] -> 'escapes'

TV[NUM=sg,SEM=<\X x.X(\y.chase(x,y))>,TNS=pres] -> 'chases'
TV[NUM=pl,SEM=<\X x.X(\y.chase(x,y))>,TNS=pres] -> 'chase'
TV[NUM=sg,SEM=<\X x.X(\y.see(x,y))>,TNS=pres] -> 'sees'
TV[NUM=pl,SEM=<\X x.X(\y.see(x,y))>,TNS=pres] -> 'see'
TV[NUM=sg,SEM=<\X x.X(\y.bite(x,y))>,TNS=pres] -> 'bites'
TV[NUM=pl,SEM=<\X x.X(\y.bite(x,y))>,TNS=pres] -> 'bite'
TV[NUM=sg,SEM=<\X x.X(\y.image(x,y))>,TNS=ger] -> 'imagining'
TV[NUM=sg,SEM=<\X x.X(\y.eat(x,y))>,TNS=pres] -> 'eat'
TV[NUM=sg,SEM=<\X x.X(\y.explain(x,y))>,TNS=pres] -> 'explains'

DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.give(x,y,z)))>,TNS=pres] -> 'gives'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.give(x,y,z)))>,TNS=pres] -> 'give'

CP[SEM=<\x.x>] -> 'is'

ADV[SEM=<\x.out(x)>] -> 'out'
ADV[SEM=<\x.quick(x)>] -> 'quickly'